import React, { useMemo } from 'react';
import { jsPDF } from 'jspdf';

const PDFGenerator = ({ image, feedback, isGenerating, setIsGenerating, websiteUrl = 'https://artcritic.com' }) => {
  // Memoize feedback text to avoid reprocessing
  const feedbackText = useMemoize(() => {
    if (!feedback) return 'No feedback available.';

    if (typeof feedback === 'object' && feedback.success !== undefined) {
      if (!feedback.success) {
        return feedback.message || 'Error retrieving feedback';
      }
      return feedback.message;
    }

    return feedback
      .trim()
      .replace(/\*\*(.*?)\*\*/g, '$1') // Remove bold formatting
      .replace(/#{1,1}\s*/g, '') // Remove header markdown
      .replace(/^\s*-\s*/gm, '• ') // Convert dashes into bullets
      .trim();
  }, [feedback]);

  const generatePDF = async () => {
    if (isGenerating) return;
    setIsGenerating(true);

    try {
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const margin = 15;
      const contentWidth = pageWidth - margin * 2;

      // Define color palette
      const primaryColor = '#5B3A8D'; // Title color
      const secondaryColor = '#3A8DDE'; // Subtitles
      const textColor = '#333333'; // Body text
      const accentColor = '#E6E6FA'; // Backgrounds

      // Helper function to add header on each page
      const addHeader = () => {
        pdf.setFillColor(accentColor);
        pdf.rect(0, 0, pageWidth, 12, 'F'); // Header background
        pdf.setFontSize(10);
        pdf.setFont('helvetica', 'italic');
        pdf.setTextColor(textColor);
        pdf.text('ArtCritic Analysis Report', margin, 8);
      };

      // Helper function to add footer on each page
      const addFooter = (pageNum) => {
        pdf.setFillColor(accentColor);
        pdf.rect(0, pageHeight - 10, pageWidth, 10, 'F'); // Footer background
        pdf.setFontSize(8);
        pdf.setFont('helvetica', 'normal');
        pdf.setTextColor(textColor);
        pdf.text(`Generated by ArtCritic - Visit us at ${websiteUrl}`, margin, pageHeight - 4);
        pdf.text(`Page ${pageNum}`, pageWidth - margin - 10, pageHeight - 4, { align: 'right' });
      };

      // Cover page
      addHeader();
      pdf.setFontSize(28);
      pdf.setFont('helvetica', 'bold');
      pdf.setTextColor(primaryColor);
      pdf.text('Art Analysis Report', pageWidth / 2, 60, { align: 'center' });
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(textColor);
      const currentDate = new Date().toLocaleDateString('en-US', { timeZone: 'Asia/Kolkata' });
      pdf.text(`Generated on: ${currentDate}`, pageWidth / 2, 80, { align: 'center' });
      pdf.setLineWidth(0.5);
      pdf.setDrawColor(secondaryColor);
      pdf.line(margin, 90, pageWidth - margin, 90); // Divider
      addFooter(1);
      pdf.addPage();

      let pageNumber = 2;
      let yPosition = margin;

      // Add header and footer to content pages
      addHeader();
      addFooter(pageNumber);

      // Add image if available
      if (image) {
        try {
          // Convert image to base64
          const imgData = await new Promise((resolve) => {
            const img = new Image();
            img.crossOrigin = 'Anonymous';
            img.onload = () => {
              const canvas = document.createElement('canvas');
              canvas.width = img.width;
              canvas.height = img.height;
              canvas.getContext('2d').drawImage(img, 0, 0);
              resolve(canvas.toDataURL('image/jpeg'));
            };
            img.onerror = () => resolve(null);
            img.src = image;
          });

          if (imgData) {
            const imgWidth = 80;
            const imgHeight = 80;
            const imgX = (pageWidth - imgWidth) / 2;
            // Add subtle border around image
            pdf.setDrawColor(secondaryColor);
            pdf.setLineWidth(0.2);
            pdf.rect(imgX - 2, yPosition - 2, imgWidth + 4, imgHeight + 4);
            pdf.addImage(imgData, 'JPEG', imgX, yPosition, imgWidth, imgHeight);
            yPosition += imgHeight + 10;
          } else {
            pdf.setFontSize(10);
            pdf.setFont('helvetica', 'italic');
            pdf.setTextColor('#FF0000'); // Red for errors
            pdf.text('[Artwork image could not be embedded]', margin, yPosition);
            pdf.setTextColor(textColor);
            yPosition += 10;
          }
        } catch (error) {
          console.warn('Could not add image to PDF:', error);
          pdf.setFontSize(10);
          pdf.setFont('helvetica', 'italic');
          pdf.setTextColor('#FF0000');
          pdf.text('[Artwork image could not be embedded]', margin, yPosition);
          pdf.setTextColor(textColor);
          yPosition += 10;
        }
      }

      // Add analysis section
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.setTextColor(secondaryColor);
      pdf.text('Analysis & Feedback', margin, yPosition);
      yPosition += 8;
      pdf.setLineWidth(0.3);
      pdf.setDrawColor(secondaryColor);
      pdf.line(margin, yPosition, pageWidth - margin, yPosition); // Section divider
      yPosition += 8;

      // Add feedback text with formatting
      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(textColor);
      const lines = pdf.splitTextToSize(feedbackText, contentWidth);

      for (let i = 0; i < lines.length; i++) {
        if (yPosition > pageHeight - margin - 15) {
          pdf.addPage();
          pageNumber++;
          addHeader();
          addFooter(pageNumber);
          yPosition = margin;
        }
        // Handle bullet points with indentation
        const isBullet = lines[i].startsWith('• ');
        const xOffset = isBullet ? margin + 5 : margin;
        const text = isBullet ? lines[i].substring(2) : lines[i];
        pdf.text(text, xOffset, yPosition);
        if (isBullet) {
          pdf.setFontSize(8);
          pdf.text('•', margin, yPosition);
          pdf.setFontSize(11);
        }
        yPosition += 6; // Increased line spacing
      }

      // Create blob URL for download
      const pdfBlob = pdf.output('blob');
      const pdfUrl = URL.createObjectURL(pdfBlob);

      // Trigger download
      const link = document.createElement('a');
      link.href = pdfUrl;
      link.download = `art-analysis-${Date.now()}.pdf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      // Clean up
      setTimeout(() => URL.revokeObjectURL(pdfUrl), 100);
    } catch (error) {
      console.error('Error generating PDF:', error.message);
      alert(`Failed to generate PDF: ${error.message}. Please try again.`);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <button
      className="generate-pdf-btn"
      onClick={generatePDF}
      disabled={isGenerating}
      aria-label="Generate PDF report"
    >
      {isGenerating ? 'Generating...' : 'Generate PDF'}
    </button>
  );
};

export default PDFGenerator;